# example env file
# copy to .env

# You also need to obtain/generate missing secrets

# ---- PUBLIC ENV VARIABLES -------------

# postgresql
# cosumed by services: database
POSTGRES_DB=rsd-db
POSTGRES_USER=rsd

# backend (postgREST)
# cosumed by services: backend
PGRST_DB_ANON_ROLE=web_anon
PGRST_DB_SCHEMA=public
PGRST_SERVER_PORT=3500

# postgREST api
# cosumed by services: authentication,frontend,auth-tests, scrapers
POSTGREST_URL=http://backend:3500

# RSD Auth module
# cosumed by services: frontend (api/fe)
RSD_AUTH_URL=http://auth:7000

# SURFCONEXT OpenID connect
# cosumed by: authentication, frontend/utils/surfConext
NEXT_PUBLIC_SURFCONEXT_CLIENT_ID=
# cosumed by: authentication, frontend/utils/surfConext
NEXT_PUBLIC_SURFCONEXT_REDIRECT=
# cosumed by: frontend/utils/surfConext
NEXT_PUBLIC_SURFCONEXT_WELL_KNOWN_URL=https://connect.test.surfconext.nl/.well-known/openid-configuration

# max requests to the GitHub API per run, optional, a default of 6 will be used
# consumed by: scrapers
MAX_REQUESTS_GITHUB=6


# ---- SECRETS ------ SECRETS -----------
# cosumed by services: database
# generate random/strong password
POSTGRES_PASSWORD=

# SURFCONEXT
# cosumed by services: authentication
# obtain the secret from SURFCONEXT dashboard
AUTH_SURFCONEXT_CLIENT_SECRET=

# POSTGREST JWT SECRET
# cosumed by services: authentication, frontend (auth-node), auth-tests, scrapers
# generate random/strong password with at least 32 characters
PGRST_JWT_SECRET=

# consumed by: scrapers
# optional, comment out if not available, should be of the form username:token
# obtain the secret from GITHUB dashboard
API_CREDENTIALS_GITHUB=

# consumed by: scrapers
# obtain the secret from ZENODO dashboard
ZENODO_ACCESS_TOKEN=
